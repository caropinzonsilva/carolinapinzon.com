{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["apiKey","GoogleApiWrapper","google","streetViewEl","useRef","sv","maps","StreetViewService","loopCount","startInterval","useState","secondsLeft","setSecondsLeft","showMap","setShowMap","guessLatLng","setGuessLatLng","goalLatLng","gameOver","setGameOver","distance","setDistance","guessIcon","url","anchor","Point","scaledSize","Size","correctIcon","useEffect","timerInterval","setInterval","current","clearInterval","initStreetView","map","latLng","panorama","StreetViewPanorama","position","setOptions","showRoadLabels","addressControl","setStreetView","getRandomInRange","from","to","fixed","Math","random","toFixed","getLatLng","a","async","randomLat","randomLng","axios","get","response","data","results","geometry","location","className","onReady","onReadyHandler","mapProps","getPanorama","radius","status","classnames","zoom","initialCenter","lat","lng","onClick","event","icon","path","strokeColor","strokeOpacity","strokeWeight","ref","latLng1","latLng2","lat1","lng1","lat2","lng2","radlat1","PI","radlat2","theta","radtheta","dist","sin","cos","acos","calculateDistance","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b245392.chunk.js","sourcesContent":["\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport classnames from 'classnames';\nimport { Map, Marker, GoogleApiWrapper, Polyline } from 'google-maps-react';\nimport './App.css';\n\nconst apiKey = 'AIzaSyB42zRFDOxDAjGNXPBm84tLeVQl68S8_pU';\n\nfunction App({ google }) {\n  const streetViewEl = useRef(null);\n  const sv = new google.maps.StreetViewService();\n  const loopCount = useRef(0);\n  const startInterval = useRef(false);\n  const [secondsLeft, setSecondsLeft] = useState(50);\n  const [showMap, setShowMap] = useState(false);\n  const [guessLatLng, setGuessLatLng] = useState();\n  const goalLatLng = useRef();\n  const [gameOver, setGameOver] = useState(false);\n  const [distance, setDistance] = useState();\n  const guessIcon = useRef({\n    url: \"guess-pin.png\",\n    anchor: new google.maps.Point(8,20),\n    scaledSize: new google.maps.Size(16,20)\n  });\n  const correctIcon = useRef({\n    url: \"correct-pin.png\",\n    anchor: new google.maps.Point(8,20),\n    scaledSize: new google.maps.Size(16,20)\n  });\n\n  useEffect(() => {\n    const timerInterval = setInterval(() => {\n      if (!startInterval.current) {\n        return;\n      }\n      setSecondsLeft(secondsLeft => secondsLeft - 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(timerInterval);\n    }\n  }, []);\n  useEffect(() => {\n    if (secondsLeft <= 0) {\n      setGameOver(true);\n    }\n  }, [secondsLeft]);\n  const initStreetView = ({ map, latLng }) => {\n    startInterval.current = true;\n    goalLatLng.current = latLng;\n    const panorama = new google.maps.StreetViewPanorama(streetViewEl.current, {\n      position: latLng,\n    });\n    panorama.setOptions({\n      showRoadLabels: false,\n      addressControl: false,\n    });\n    map.setStreetView(panorama);\n  };\n  const getRandomInRange = ({ from, to, fixed }) => {\n    return (Math.random() * (to - from) + from).toFixed(fixed) * 1;\n  };\n  const getLatLng = async () => {\n    const randomLat = getRandomInRange({ from: 49.0059202, to: 49.3910868, fixed: 6 });\n    const randomLng = getRandomInRange({ from: -123.3191662, to: -121.733225, fixed: 6 });\n    const response = await axios.get(\n      `https://maps.googleapis.com/maps/api/geocode/json?latlng=${randomLat},${randomLng}&key=${apiKey}`\n    );\n    return response?.data?.results[0]?.geometry?.location;\n  };\n  const onReadyHandler = async (mapProps, map) => {\n    if (loopCount.current > 10) {\n      return;\n    }\n\n    const latLng = await getLatLng();\n    sv.getPanorama({ location: latLng, radius: 50 }, (data, status) => {\n      if (status !== 'OK') {\n        loopCount.current++;\n        return onReadyHandler(mapProps, map);\n      }\n      initStreetView({ map, latLng });\n    });\n  };\n  const toggleViews = () => {\n    setShowMap(showMap => !showMap);\n  };\n\n  const onClickHandler = (mapProps, map, event) => {\n    if (gameOver) {\n      return;\n    }\n    const lat = event.latLng.lat();\n    const lng = event.latLng.lng();\n    setGuessLatLng({ lat, lng });\n  };\n\n  const calculateDistance = (latLng1, latLng2) => {\n    const { lat: lat1, lng: lng1 } = latLng1;\n    const { lat: lat2, lng: lng2 } = latLng2;\n    if ((lat1 === lat2) && (lng1 === lng2)) {\n      return 0;\n    }\n    const radlat1 = Math.PI * lat1/180;\n    const radlat2 = Math.PI * lat2/180;\n    const theta = lng1-lng2;\n    const radtheta = Math.PI * theta/180;\n    let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = dist * 180/Math.PI;\n    dist = dist * 60 * 1.1515 * 1.609344;\n    return dist;\n  };\n\n  const confirmGuess = () => {\n    setDistance(calculateDistance(goalLatLng.current, guessLatLng));\n    setGameOver(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <Map\n        google={google}\n        onReady={onReadyHandler}\n        className=\"View--hide\"\n      />\n      <div className={classnames('MapView', { 'View--hide': !(showMap || gameOver), 'MapView--small': !gameOver })}>\n        <Map\n          google={google}\n          zoom={10}\n          initialCenter={{ lat: 49.136539, lng: -122.604144 }}\n          onClick={onClickHandler}\n        >\n          {guessLatLng && <Marker position={guessLatLng} icon={guessIcon.current} />}\n          {gameOver && <Marker position={goalLatLng.current} icon={correctIcon.current} />}\n          {gameOver && (\n            <Polyline\n              path={[\n                guessLatLng,\n                goalLatLng.current\n              ]}\n              strokeColor=\"#000000\"\n              strokeOpacity={0.8}\n              strokeWeight={2}\n            />\n          )}\n        </Map>\n      </div>\n      <div className={classnames('StreetView', { 'StreetView--small': showMap || gameOver, 'View--hide': gameOver })} ref={streetViewEl} />\n      {!gameOver && (\n        <>\n          <div className=\"Seconds\">{secondsLeft}</div>\n          <button className=\"ToggleButton\" onClick={toggleViews}>\n            {showMap ? 'ðŸš— Street view' : 'ðŸ’¡ Guess'}\n          </button>\n          {guessLatLng && (\n            <button className=\"ConfirmButton\" onClick={confirmGuess}>\n              âœ… Confirm guess\n            </button>\n          )}\n        </>\n      )}\n      {distance && (\n        <div className=\"Distance\">{distance.toFixed(2)}km</div>\n      )}\n    </div>\n  );\n}\n\nexport default GoogleApiWrapper({\n  apiKey,\n})(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}